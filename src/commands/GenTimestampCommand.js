// Returns a UNIX Stamp given a date-time and a style

const CUSTOM_ID = "cts_modal";

import { SlashCommand, ComponentType, TextInputStyle, MessageFlags } from "slash-create";
class GenTimestampCommand extends SlashCommand{
    constructor(creator){
        super(creator,  {
            name: 'create-timestamp',
            description: 'Create a UNIX timestamp with an optional message',
        });

        creator.registerGlobalModal(CUSTOM_ID, async mctx =>{
            try{
                let dateF = (mctx.values.date_input).split("/");
                dateF[0] = dateF[0].padStart(2,"0");
                dateF[1] = dateF[0].padStart(2,"0");
                let timeF = (mctx.values.time_input).split(":");
                timeF[0] = timeF[0].padStart(2,"0");
                let utcF = (mctx.values.utc_input).split(":");
                if(dateF.length != 3 || timeF.length != 2 || dateF[2].length < 4  ){
                    await mctx.send({
                            content: "ERROR: Date/Time is not in a valid, readable format.",
                            ephemeral: true
                        });
                    return;
                }
                let cliOffset = parseInt(utcF[0], 10);
                if(cliOffset < -12 || cliOffset > 14){
                    await mctx.send({
                        content: "ERROR: UTC offset is outside of acceptable range (-12:00 -> +14:00)",
                        ephemeral: true
                    });
                    return;
                }
                if(cliOffset === 0){
                    cliOffset = "Z";
                }
                else{
                    let mins = ":00";
                    if(utcF.length > 1 && utcF[1] == 30){
                        mins = ":30";
                    }
                    cliOffset = Math.floor(cliOffset);
                    cliOffset = cliOffset < 0 ? ("-" + String(Math.abs(cliOffset)).padStart(2, "0")) + mins : 
                        ("+" + String(cliOffset).padStart(2, "0") + mins);
                        // console.log("CLIOFFSET: " + cliOffset);
                }
                // console.log(`${dateF[2]}-${dateF[0]}-${dateF[1]}T${timeF[0]}:${timeF[1]}:00.000${cliOffset}`);
                let dateFull = new Date(
                    `${dateF[2]}-${dateF[0]}-${dateF[1]}T${timeF[0]}:${timeF[1]}:00.000${cliOffset}`
                );
                // console.log(dateFull);
                const styleF = mctx.values.style_input === "N" ? "" : mctx.values.style_input;
                const uTime = Math.floor(dateFull.getTime() / 1000);
                if(isNaN(uTime)){
                    await mctx.send({
                        content: "ERROR: Date/Time is not in a valid, readable format.",
                        ephemeral: true
                    });
                    return;
                }
                const msg =  mctx.values.msg_input;
                await mctx.send(
                    {
                    flags: MessageFlags.IS_COMPONENTS_V2,
                    components: [
                            {
                                type: ComponentType.CONTAINER,
                                accent_color: 0xcc0000,
                                components: [
                                    {
                                        type: ComponentType.TEXT_DISPLAY,
                                        content: "-# *Timestamp Generated by Stamp-Discord*"
                                    },
                                    {
                                        type: ComponentType.MEDIA_GALLERY,
                                        items: [{
                                            media: {
                                                url: mctx.user.avatarURL
                                            }
                                        }]
                                    },
                                    {
                                        type: ComponentType.TEXT_DISPLAY,
                                        content: `-# *Created by: ${mctx.user.globalName}*`
                                    },
                                    {
                                        type: ComponentType.SEPARATOR
                                    },
                                    {
                                        type: ComponentType.TEXT_DISPLAY,
                                        content: `## <t:${uTime}${styleF}>`
                                    },
                                    {
                                    type: ComponentType.TEXT_DISPLAY,
                                    content: msg ?? "New timestamp"
                                    }
                            ]}
                    ]}
                );
        }
        catch(error){
            console.error(error);
        }
    })
}
    

    async run(ctx){
        try {
            await ctx.sendModal(
                {
                    custom_id: CUSTOM_ID,
                    title: "Create Timestamp Message",
                    components: [
                        {
                            type: ComponentType.LABEL,
                            label: "Enter date in 'MM/DD/YYYY' format", 
                            component:
                                {
                                    type: ComponentType.TEXT_INPUT,
                                    custom_id: "date_input",
                                    required: true,
                                    style: TextInputStyle.SHORT,
                                    min_length: 8,
                                    max_length: 10
                                }
                        },
                        {
                            type: ComponentType.LABEL,
                            label: "Enter time in 'HH:MM' format (24-hour-time)",
                            component:
                                {
                                    type: ComponentType.TEXT_INPUT,
                                    custom_id: "time_input",
                                    required: true,
                                    style: TextInputStyle.SHORT,
                                    min_length: 4,
                                    max_length: 5,
                                    default: "12:00"
                                }
                        },
                        {
                            type: ComponentType.LABEL,
                            label: "Select timestamp style",
                            component:
                                {
                                    type: ComponentType.STRING_SELECT,
                                    custom_id: "style_input",
                                    required: true,
                                    min_values: 1,
                                    max_values: 1,
                                    options: [
                                        {label: "Default", value:"N"},
                                        {label: "Short Time", value:":t"},
                                        {label: "Long Time", value:":T"},
                                        {label: "Short Date", value:":d"},
                                        {label: "Long Date", value:":D"},
                                        {label: "Short Date/Time", value:":f"},
                                        {label: "Long Date/Time", value:":F"},
                                        {label: "Relative Time", value:":R"}
                                    ],
                            }
                        },
                        {
                            type: ComponentType.LABEL,
                            label: "UTC Offset (Suggested by default)",
                            component: {
                                type: ComponentType.TEXT_INPUT,
                                custom_id: "utc_input",
                                required: true,
                                placeholder: (new Date().getTimezoneOffset() / -60),
                                max_length: 5,
                                min_length: 1,
                                style: TextInputStyle.SHORT
                            }
                        },
                        {
                            type: ComponentType.LABEL,
                            label: "Message (optional)",
                            component: {
                                type: ComponentType.TEXT_INPUT,
                                custom_id: "msg_input",
                                required: false,
                                style: TextInputStyle.PARAGRAPH
                            }
                        }
                    ]
                }
            );
            await ctx.defer(false);

        } catch (error) {
            console.error(error);
        }
    }
}

export { GenTimestampCommand }